

        *** GPGPU-Sim Simulator Version 4.0.0  [build gpgpu-sim_git-commit-8bdd2baba4559c8560794c09fc8c1757889616c4_modified_2.0] ***


GPGPU-Sim PTX: simulation mode 0 (can change with PTX_SIM_MODE_FUNC environment variable:
               1=functional simulation only, 0=detailed performance simulator)
GPGPU-Sim PTX: overriding embedded ptx with ptx file (PTX_SIM_USE_PTX_FILE is set)
GPGPU-Sim: Configuration options:

-save_embedded_ptx                      0 # saves ptx files embedded in binary as <n>.ptx
-keep                                   0 # keep intermediate files created by GPGPU-Sim when interfacing with external programs
-gpgpu_ptx_save_converted_ptxplus                    0 # Saved converted ptxplus to a file
-gpgpu_occupancy_sm_number                   70 # The SM number to pass to ptxas when getting register usage for computing GPU occupancy. This parameter is required in the config.
-ptx_opcode_latency_int      4,13,4,5,145,32 # Opcode latencies for integers <ADD,MAX,MUL,MAD,DIV,SHFL>Default 1,1,19,25,145,32
-ptx_opcode_latency_fp          4,13,4,5,39 # Opcode latencies for single precision floating points <ADD,MAX,MUL,MAD,DIV>Default 1,1,1,1,30
-ptx_opcode_latency_dp         8,19,8,8,330 # Opcode latencies for double precision floating points <ADD,MAX,MUL,MAD,DIV>Default 8,8,8,8,335
-ptx_opcode_latency_sfu                  100 # Opcode latencies for SFU instructionsDefault 8
-ptx_opcode_latency_tesnor                   64 # Opcode latencies for Tensor instructionsDefault 64
-ptx_opcode_initiation_int          2,2,2,2,8,4 # Opcode initiation intervals for integers <ADD,MAX,MUL,MAD,DIV,SHFL>Default 1,1,4,4,32,4
-ptx_opcode_initiation_fp            2,2,2,2,4 # Opcode initiation intervals for single precision floating points <ADD,MAX,MUL,MAD,DIV>Default 1,1,1,1,5
-ptx_opcode_initiation_dp          4,4,4,4,130 # Opcode initiation intervals for double precision floating points <ADD,MAX,MUL,MAD,DIV>Default 8,8,8,8,130
-ptx_opcode_initiation_sfu                    8 # Opcode initiation intervals for sfu instructionsDefault 8
-ptx_opcode_initiation_tensor                   64 # Opcode initiation intervals for tensor instructionsDefault 64
-cdp_latency         7200,8000,100,12000,1600 # CDP API latency <cudaStreamCreateWithFlags, cudaGetParameterBufferV2_init_perWarp, cudaGetParameterBufferV2_perKernel, cudaLaunchDeviceV2_init_perWarp, cudaLaunchDevicV2_perKernel>Default 7200,8000,100,12000,1600
-network_mode                           2 # Interconnection network mode
-inter_config_file                   mesh # Interconnection network config file
-icnt_in_buffer_limit                  512 # in_buffer_limit
-icnt_out_buffer_limit                  512 # out_buffer_limit
-icnt_subnets                           2 # subnets
-icnt_arbiter_algo                      1 # arbiter_algo
-icnt_verbose                           0 # inct_verbose
-icnt_grant_cycles                      1 # grant_cycles
-gpgpu_ptx_use_cuobjdump                    1 # Use cuobjdump to extract ptx and sass from binaries
-gpgpu_experimental_lib_support                    0 # Try to extract code from cuda libraries [Broken because of unknown cudaGetExportTable]
-checkpoint_option                      0 #  checkpointing flag (0 = no checkpoint)
-checkpoint_kernel                      1 #  checkpointing during execution of which kernel (1- 1st kernel)
-checkpoint_CTA                         0 #  checkpointing after # of CTA (< less than total CTA)
-resume_option                          0 #  resume flag (0 = no resume)
-resume_kernel                          0 #  Resume from which kernel (1= 1st kernel)
-resume_CTA                             0 #  resume from which CTA 
-checkpoint_CTA_t                       0 #  resume from which CTA 
-checkpoint_insn_Y                      0 #  resume from which CTA 
-gpgpu_ptx_convert_to_ptxplus                    0 # Convert SASS (native ISA) to ptxplus and run ptxplus
-gpgpu_ptx_force_max_capability                   70 # Force maximum compute capability
-gpgpu_ptx_inst_debug_to_file                    0 # Dump executed instructions' debug information to file
-gpgpu_ptx_inst_debug_file       inst_debug.txt # Executed instructions' debug output file
-gpgpu_ptx_inst_debug_thread_uid                    1 # Thread UID for executed instructions' debug output
-gpgpu_simd_model                       1 # 1 = post-dominator
-gpgpu_shader_core_pipeline              2048:32 # shader core pipeline config, i.e., {<nthread>:<warpsize>}
-gpgpu_tex_cache:l1  N:4:128:256,L:R:m:N:L,T:512:8,128:2 # per-shader L1 texture cache  (READ-ONLY) config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq>:<rf>}
-gpgpu_const_cache:l1 N:128:64:8,L:R:f:N:L,S:2:64,4 # per-shader L1 constant memory cache  (READ-ONLY) config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq>} 
-gpgpu_cache:il1     N:64:128:16,L:R:f:N:L,S:2:48,4 # shader L1 instruction cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq>} 
-gpgpu_cache:dl1     S:1:128:256,L:L:s:N:L,A:256:8,16:0,32 # per-shader L1 data cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq> | none}
-gpgpu_l1_banks                         4 # The number of L1 cache banks
-gpgpu_l1_banks_byte_interleaving                   32 # l1 banks byte interleaving granularity
-gpgpu_l1_banks_hashing_function                    0 # l1 banks hashing function
-gpgpu_l1_latency                      20 # L1 Hit Latency
-gpgpu_smem_latency                    20 # smem Latency
-gpgpu_cache:dl1PrefL1                 none # per-shader L1 data cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq> | none}
-gpgpu_cache:dl1PrefShared                 none # per-shader L1 data cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq> | none}
-gpgpu_gmem_skip_L1D                    0 # global memory access skip L1D cache (implements -Xptxas -dlcm=cg, default=no skip)
-gpgpu_perfect_mem                      0 # enable perfect memory mode (no cache miss)
-n_regfile_gating_group                    4 # group of lanes that should be read/written together)
-gpgpu_clock_gated_reg_file                    0 # enable clock gated reg file for power calculations
-gpgpu_clock_gated_lanes                    0 # enable clock gated lanes for power calculations
-gpgpu_shader_registers                65536 # Number of registers per shader core. Limits number of concurrent CTAs. (default 8192)
-gpgpu_registers_per_block                65536 # Maximum number of registers per CTA. (default 8192)
-gpgpu_ignore_resources_limitation                    0 # gpgpu_ignore_resources_limitation (default 0)
-gpgpu_shader_cta                      32 # Maximum number of concurrent CTAs in shader (default 8)
-gpgpu_num_cta_barriers                   16 # Maximum number of named barriers per CTA (default 16)
-gpgpu_n_clusters                      40 # number of processing clusters
-gpgpu_n_cores_per_cluster                    2 # number of simd cores per cluster
-gpgpu_n_cluster_ejection_buffer_size                   32 # number of packets in ejection buffer
-gpgpu_n_ldst_response_buffer_size                    2 # number of response packets in ld/st unit ejection buffer
-gpgpu_shmem_per_block                65536 # Size of shared memory per thread block or CTA (default 48kB)
-gpgpu_shmem_size                   98304 # Size of shared memory per shader core (default 16kB)
-gpgpu_adaptive_cache_config                    1 # adaptive_cache_config
-gpgpu_shmem_sizeDefault                98304 # Size of shared memory per shader core (default 16kB)
-gpgpu_shmem_size_PrefL1                16384 # Size of shared memory per shader core (default 16kB)
-gpgpu_shmem_size_PrefShared                16384 # Size of shared memory per shader core (default 16kB)
-gpgpu_shmem_num_banks                   32 # Number of banks in the shared memory in each shader core (default 16)
-gpgpu_shmem_limited_broadcast                    0 # Limit shared memory to do one broadcast per cycle (default on)
-gpgpu_shmem_warp_parts                    1 # Number of portions a warp is divided into for shared memory bank conflict check 
-gpgpu_mem_unit_ports                    1 # The number of memory transactions allowed per core cycle
-gpgpu_shmem_warp_parts                    1 # Number of portions a warp is divided into for shared memory bank conflict check 
-gpgpu_warpdistro_shader                   -1 # Specify which shader core to collect the warp size distribution from
-gpgpu_warp_issue_shader                    0 # Specify which shader core to collect the warp issue distribution from
-gpgpu_local_mem_map                    1 # Mapping from local memory space address to simulated GPU physical address space (default = enabled)
-gpgpu_num_reg_banks                    8 # Number of register banks (default = 8)
-gpgpu_reg_bank_use_warp_id                    0 # Use warp ID in mapping registers to banks (default = off)
-gpgpu_sub_core_model                    1 # Sub Core Volta/Pascal model (default = off)
-gpgpu_enable_specialized_operand_collector                    0 # enable_specialized_operand_collector
-gpgpu_operand_collector_num_units_sp                    4 # number of collector units (default = 4)
-gpgpu_operand_collector_num_units_dp                    0 # number of collector units (default = 0)
-gpgpu_operand_collector_num_units_sfu                    4 # number of collector units (default = 4)
-gpgpu_operand_collector_num_units_int                    0 # number of collector units (default = 0)
-gpgpu_operand_collector_num_units_tensor_core                    4 # number of collector units (default = 4)
-gpgpu_operand_collector_num_units_mem                    2 # number of collector units (default = 2)
-gpgpu_operand_collector_num_units_gen                    8 # number of collector units (default = 0)
-gpgpu_operand_collector_num_in_ports_sp                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_in_ports_dp                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_in_ports_sfu                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_in_ports_int                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_in_ports_tensor_core                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_in_ports_mem                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_in_ports_gen                    8 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_out_ports_sp                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_out_ports_dp                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_out_ports_sfu                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_out_ports_int                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_out_ports_tensor_core                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_out_ports_mem                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_out_ports_gen                    8 # number of collector unit in ports (default = 0)
-gpgpu_coalesce_arch                   60 # Coalescing arch (GT200 = 13, Fermi = 20)
-gpgpu_num_sched_per_core                    4 # Number of warp schedulers per core
-gpgpu_max_insn_issue_per_warp                    1 # Max number of instructions that can be issued per warp in one cycle by scheduler (either 1 or 2)
-gpgpu_dual_issue_diff_exec_units                    1 # should dual issue use two different execution unit resources (Default = 1)
-gpgpu_simt_core_sim_order                    1 # Select the simulation order of cores in a cluster (0=Fix, 1=Round-Robin)
-gpgpu_pipeline_widths 4,4,4,4,4,4,4,4,4,4,8,4,4 # Pipeline widths ID_OC_SP,ID_OC_DP,ID_OC_INT,ID_OC_SFU,ID_OC_MEM,OC_EX_SP,OC_EX_DP,OC_EX_INT,OC_EX_SFU,OC_EX_MEM,EX_WB,ID_OC_TENSOR_CORE,OC_EX_TENSOR_CORE
-gpgpu_tensor_core_avail                    1 # Tensor Core Available (default=0)
-gpgpu_num_sp_units                     4 # Number of SP units (default=1)
-gpgpu_num_dp_units                     4 # Number of DP units (default=0)
-gpgpu_num_int_units                    4 # Number of INT units (default=0)
-gpgpu_num_sfu_units                    4 # Number of SF units (default=1)
-gpgpu_num_tensor_core_units                    4 # Number of tensor_core units (default=1)
-gpgpu_num_mem_units                    1 # Number if ldst units (default=1) WARNING: not hooked up to anything
-gpgpu_scheduler                      gto # Scheduler configuration: < lrr | gto | two_level_active > If two_level_active:<num_active_warps>:<inner_prioritization>:<outer_prioritization>For complete list of prioritization values see shader.h enum scheduler_prioritization_typeDefault: gto
-gpgpu_concurrent_kernel_sm                    0 # Support concurrent kernels on a SM (default = disabled)
-gpgpu_perfect_inst_const_cache                    1 # perfect inst and const cache mode, so all inst and const hits in the cache(default = disabled)
-gpgpu_inst_fetch_throughput                    4 # the number of fetched intruction per warp each cycle
-gpgpu_reg_file_port_throughput                    2 # the number ports of the register file
-specialized_unit_1         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_2         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_3         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_4         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_5         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_6         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_7         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_8         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-gpgpu_perf_sim_memcpy                    1 # Fill the L2 cache on memcpy
-gpgpu_simple_dram_model                    0 # simple_dram_model with fixed latency and BW
-gpgpu_dram_scheduler                    1 # 0 = fifo, 1 = FR-FCFS (defaul)
-gpgpu_dram_partition_queues          64:64:64:64 # i2$:$2d:d2$:$2i
-l2_ideal                               0 # Use a ideal L2 cache that always hit
-gpgpu_cache:dl2     S:32:128:24,L:B:m:L:P,A:192:4,32:0,32 # unified banked L2 data cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq>}
-gpgpu_cache:dl2_texture_only                    0 # L2 cache used for texture only
-gpgpu_n_mem                           24 # number of memory modules (e.g. memory controllers) in gpu
-gpgpu_n_sub_partition_per_mchannel                    2 # number of memory subpartition in each memory module
-gpgpu_n_mem_per_ctrlr                    1 # number of memory chips per memory controller
-gpgpu_memlatency_stat                   14 # track and display latency statistics 0x2 enables MC, 0x4 enables queue logs
-gpgpu_frfcfs_dram_sched_queue_size                   64 # 0 = unlimited (default); # entries per chip
-gpgpu_dram_return_queue_size                  192 # 0 = unlimited (default); # entries per chip
-gpgpu_dram_buswidth                   16 # default = 4 bytes (8 bytes per cycle at DDR)
-gpgpu_dram_burst_length                    2 # Burst length of each DRAM request (default = 4 data bus cycle)
-dram_data_command_freq_ratio                    2 # Frequency ratio between DRAM data bus and command bus (default = 2 times, i.e. DDR)
-gpgpu_dram_timing_opt nbk=16:CCD=1:RRD=3:RCD=12:RAS=28:RP=12:RC=40: CL=12:WL=2:CDLR=3:WR=10:nbkgrp=4:CCDL=2:RTPL=3 # DRAM timing parameters = {nbk:tCCD:tRRD:tRCD:tRAS:tRP:tRC:CL:WL:tCDLR:tWR:nbkgrp:tCCDL:tRTPL}
-gpgpu_l2_rop_latency                  160 # ROP queue latency (default 85)
-dram_latency                         100 # DRAM latency (default 30)
-dram_dual_bus_interface                  257 # dual_bus_interface (default = 0) 
-dram_bnk_indexing_policy                    1 # dram_bnk_indexing_policy (0 = normal indexing, 1 = Xoring with the higher bits) (Default = 0)
-dram_bnkgrp_indexing_policy                    1 # dram_bnkgrp_indexing_policy (0 = take higher bits, 1 = take lower bits) (Default = 0)
-dram_seperate_write_queue_enable                    1 # Seperate_Write_Queue_Enable
-dram_write_queue_size           128:108:32 # Write_Queue_Size
-dram_elimnate_rw_turnaround                    0 # elimnate_rw_turnaround i.e set tWTR and tRTW = 0
-icnt_flit_size                        40 # icnt_flit_size
-gpgpu_mem_addr_mapping dramid@8;00000000.00000000.00000000.00000000.0000RRRR.RRRRRRRR.RBBBCCCB.CCCSSSSS # mapping memory address to dram model {dramid@<start bit>;<memory address map>}
-gpgpu_mem_addr_test                    0 # run sweep test to check address mapping for aliased address
-gpgpu_mem_address_mask                    1 # 0 = old addressing mask, 1 = new addressing mask, 2 = new add. mask + flipped bank sel and chip sel bits
-gpgpu_memory_partition_indexing                    2 # 0 = no indexing, 1 = bitwise xoring, 2 = IPoly, 3 = custom indexing
-gpuwattch_xml_file         gpuwattch.xml # GPUWattch XML file
-power_simulation_enabled                    0 # Turn on power simulator (1=On, 0=Off)
-power_per_cycle_dump                    0 # Dump detailed power output each cycle
-power_trace_enabled                    0 # produce a file for the power trace (1=On, 0=Off)
-power_trace_zlevel                     6 # Compression level of the power trace output log (0=no comp, 9=highest)
-steady_power_levels_enabled                    0 # produce a file for the steady power levels (1=On, 0=Off)
-steady_state_definition                  8:4 # allowed deviation:number of samples
-gpgpu_max_cycle                        0 # terminates gpu simulation early (0 = no limit)
-gpgpu_max_insn                         0 # terminates gpu simulation early (0 = no limit)
-gpgpu_max_cta                          0 # terminates gpu simulation early (0 = no limit)
-gpgpu_max_completed_cta                    0 # terminates gpu simulation early (0 = no limit)
-gpgpu_runtime_stat                   500 # display runtime statistics such as dram utilization {<freq>:<flag>}
-liveness_message_freq                    1 # Minimum number of seconds between simulation liveness messages (0 = always print)
-gpgpu_compute_capability_major                    7 # Major compute capability version number
-gpgpu_compute_capability_minor                    0 # Minor compute capability version number
-gpgpu_flush_l1_cache                    1 # Flush L1 cache at the end of each kernel call
-gpgpu_flush_l2_cache                    0 # Flush L2 cache at the end of each kernel call
-gpgpu_deadlock_detect                    1 # Stop the simulation at deadlock (1=on (default), 0=off)
-gpgpu_ptx_instruction_classification                    0 # if enabled will classify ptx instruction types per kernel (Max 255 kernels now)
-gpgpu_ptx_sim_mode                     0 # Select between Performance (default) or Functional simulation (1)
-gpgpu_clock_domains 1200.0:1200.0:1200.0:850.0 # Clock Domain Frequencies in MhZ {<Core Clock>:<ICNT Clock>:<L2 Clock>:<DRAM Clock>}
-gpgpu_max_concurrent_kernel                    8 # maximum kernels that can run concurrently on GPU
-gpgpu_cflog_interval                    0 # Interval between each snapshot in control flow logger
-visualizer_enabled                     0 # Turn on visualizer output (1=On, 0=Off)
-visualizer_outputfile                 NULL # Specifies the output log file for visualizer
-visualizer_zlevel                      6 # Compression level of the visualizer output log (0=no comp, 9=highest)
-gpgpu_stack_size_limit                 1024 # GPU thread stack size
-gpgpu_heap_size_limit              8388608 # GPU malloc heap size 82a7156a255a744c28117fd80c7cce7f  /home/gpgpuskip/final/mat
Extracting PTX file and ptxas options    1: mat.1.sm_20.ptx -arch=sm_20

-gpgpu_runtime_sync_depth_limit                    2 # GPU device runtime synchronize depth
-gpgpu_runtime_pending_launch_count_limit                 2048 # GPU device runtime pending launch count
-trace_enabled                          0 # Turn on traces
-trace_components                    none # comma seperated list of traces to enable. Complete list found in trace_streams.tup. Default none
-trace_sampling_core                    0 # The core which is printed using CORE_DPRINTF. Default 0
-trace_sampling_memory_partition                   -1 # The memory partition which is printed using MEMPART_DPRINTF. Default -1 (i.e. all)
-enable_ptx_file_line_stats                    1 # Turn on PTX source line statistic profiling. (1 = On)
-ptx_line_stats_filename gpgpu_inst_stats.txt # Output file for PTX source line statistics.
-gpgpu_kernel_launch_latency                    0 # Kernel launch latency in cycles. Default: 0
-gpgpu_cdp_enabled                      0 # Turn on CDP
-gpgpu_TB_launch_latency                    0 # thread block launch latency in cycles. Default: 0
DRAM Timing Options:
nbk                                    16 # number of banks
CCD                                     1 # column to column delay
RRD                                     3 # minimal delay between activation of rows in different banks
RCD                                    12 # row to column delay
RAS                                    28 # time needed to activate row
RP                                     12 # time needed to precharge (deactivate) row
RC                                     40 # row cycle time
CDLR                                    3 # switching from write to read (changes tWTR)
WR                                     10 # last data-in to row precharge
CL                                     12 # CAS latency
WL                                      2 # Write latency
nbkgrp                                  4 # number of bank groups
CCDL                                    2 # column to column delay between accesses to different bank groups
RTPL                                    3 # read to precharge delay between accesses to different bank groups
Total number of memory sub partition = 48
addr_dec_mask[CHIP]  = 0000000000000000 	high:64 low:0
addr_dec_mask[BK]    = 0000000000007100 	high:15 low:8
addr_dec_mask[ROW]   = 000000000fff8000 	high:28 low:15
addr_dec_mask[COL]   = 0000000000000eff 	high:12 low:0
addr_dec_mask[BURST] = 000000000000001f 	high:5 low:0
sub_partition_id_mask = 0000000000000100
GPGPU-Sim uArch: clock freqs: 1200000000.000000:1200000000.000000:1200000000.000000:850000000.000000
GPGPU-Sim uArch: clock periods: 0.00000000083333333333:0.00000000083333333333:0.00000000083333333333:0.00000000117647058824
*** Initializing Memory Statistics ***
GPGPU-Sim uArch: performance model initialization complete.
self exe links to: /home/gpgpuskip/final/mat
self exe links to: /home/gpgpuskip/final/mat
8.0
GPGPU-Sim PTX: __cudaRegisterFatBinary, fat_cubin_handle = 1, filename=default
self exe links to: /home/gpgpuskip/final/mat
Running md5sum using "md5sum /home/gpgpuskip/final/mat "
self exe links to: /home/gpgpuskip/final/mat
Extracting specific PTX file named mat.1.sm_20.ptx 
GPGPU-Sim PTX: __cudaRegisterFunction _Z6MatAddPfS_S_ : hostFun 0x0x400eb0, fat_cubin_handle = 1
GPGPU-Sim PTX: Parsing mat.1.sm_20.ptx
GPGPU-Sim PTX: instruction assembly for function '_Z6MatAddPfS_S_'...   done.
GPGPU-Sim PTX: finished parsing EMBEDDED .ptx file mat.1.sm_20.ptx
GPGPU-Sim PTX: loading globals with explicit initializers... 
GPGPU-Sim PTX: finished loading globals (0 bytes total).
GPGPU-Sim PTX: loading constants with explicit initializers...  done.
GPGPU-Sim PTX: Loading PTXInfo from mat.1.sm_20.ptx
GPGPU-Sim PTX: Kernel '_Z6MatAddPfS_S_' : regs=10, lmem=0, smem=0, cmem=56
GPGPU-Sim PTX: Setting up arguments for 8 bytes starting at 0x7ffcd07f8ed8..
GPGPU-Sim PTX: Setting up arguments for 8 bytes starting at 0x7ffcd07f8ed0..
GPGPU-Sim PTX: Setting up arguments for 8 bytes starting at 0x7ffcd07f8ec8..

GPGPU-Sim PTX: cudaLaunch for 0x0x400eb0 (mode=performance simulation) on stream 0
GPGPU-Sim PTX: finding reconvergence points for '_Z6MatAddPfS_S_'...
GPGPU-Sim PTX: Finding dominators for '_Z6MatAddPfS_S_'...
GPGPU-Sim PTX: Finding immediate dominators for '_Z6MatAddPfS_S_'...
GPGPU-Sim PTX: Finding postdominators for '_Z6MatAddPfS_S_'...
GPGPU-Sim PTX: Finding immediate postdominators for '_Z6MatAddPfS_S_'...
GPGPU-Sim PTX: pre-decoding instructions for '_Z6MatAddPfS_S_'...
GPGPU-Sim PTX: reconvergence points for _Z6MatAddPfS_S_...
GPGPU-Sim PTX:  1 (potential) branch divergence @  PC=0x070 (mat.1.sm_20.ptx:41) @!%p3 bra BB0_2;
GPGPU-Sim PTX:    immediate post dominator      @  PC=0x0e8 (mat.1.sm_20.ptx:60) ret;
GPGPU-Sim PTX:  2 (potential) branch divergence @  PC=0x078 (mat.1.sm_20.ptx:42) bra.uni BB0_1;
GPGPU-Sim PTX:    immediate post dominator      @  PC=0x080 (mat.1.sm_20.ptx:45) cvta.to.global.u64 %rd4, %rd1;
GPGPU-Sim PTX: ... end of reconvergence points for _Z6MatAddPfS_S_
GPGPU-Sim PTX: ... done pre-decoding instructions for '_Z6MatAddPfS_S_'.
GPGPU-Sim PTX: pushing kernel '_Z6MatAddPfS_S_' to stream 0, gridDim= (512,512,1) blockDim = (1,1,1) 
GPGPU-Sim uArch: Shader 0 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: CTA/core = 32, limited by: cta_limit
GPGPU-Sim: Reconfigure L1 cache to 128KB
GPGPU-Sim uArch: Shader 2 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 4 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 6 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 8 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 10 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 12 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 14 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 16 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 18 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 20 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 22 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 24 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 26 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 28 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 30 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 32 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 34 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 36 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 38 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 40 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 42 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 44 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 46 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 48 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 50 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 52 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 54 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 56 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 58 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 60 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 62 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 64 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 66 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 68 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 70 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 72 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 74 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 76 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 78 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 1 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 3 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 5 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 7 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 9 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 11 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 13 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 15 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 17 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 19 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 21 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 23 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 25 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 27 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 29 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 31 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 33 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 35 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 37 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 39 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 41 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 43 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 45 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 47 bind to kernel 1 '_Z6MatAddPfS_S_'
GPGPU-Sim uArch: Shader 49 bind to kernel 1